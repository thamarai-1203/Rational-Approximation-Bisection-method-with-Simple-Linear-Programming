def f(x):
    return x**3 - 4*x**2 + 4*x + 1

def bisection_method(f, a, b, epsilon):
    if f(a) * f(b) >= 0:
        print("Bisection method cannot guarantee convergence.")
        return None, 0

    k = 0
    while abs(b - a) > epsilon:
        c = (a + b) / 2
        if f(c) == 0:
            return c, k + 1  # Return the root and the number of iterations
        elif f(a) * f(c) < 0:
            b = c
        else:
            a = c
        k += 1

    return (a + b) / 2, k + 1  # Return the approximate location and the number of iterations

# Input
a = 1
b = 3
epsilon = 0.0001

# Apply bisection method
result, iterations = bisection_method(f, a, b, epsilon)

# Output
if result is not None:
    print("Approximate location of the local minimum:", result)
    print("Number of iterations:", iterations)
